<import name="native-ad" src="../ad/nativeAD"></import>
<import name="nativebanner-ad" src="../ad/naBannerAd"></import>
<template>
  <div class="container">
    <div style="justify-content: center; align-items: center; position: absolute; top: 72px; height: 80px; width: 100%" onclick="back">
      <image show="{{isbolckReturn}}" style="position: absolute; left: 20px; margin-left: 10px; width: 28px; height: 34px" src="/Common/img/back.png"></image>
      <text style="font-size: 35px; color: #000000; margin-left: -10px">计步星球</text>
    </div>

    <stack class="daliy">
      <image style="position: absolute; top: 0; right: 0; bottom: 0; width: 134px; height: 52px" src="/Common/img/ad/icon_cs.png"></image>
      <text>
        <span style="color: #000000; font-weight: bold">{{ receivedCount === 0 ? '今日次数已用完' : '今日免费：' }}</span>
        <span if="{{receivedCount > 0}}" style="color: #fff; font-weight: bold">{{receivedCount}}次</span>
      </text>
    </stack>
    <!-- <text if="{{isShowLogin}}" style="color: #fff; font-weight: bold">当天广告点击次数：{{countNow}}次</text>
    <text if="{{isShowLogin}}" style="color: #fff; font-weight: bold">是否开启点击层{{isShowTclayer}}</text> -->
    <div style="position: absolute; width: 282px; height: 282px; top: 800px; left: 250px" onclick="openad"></div>

    <div class="btm_view">
      <div for="{{quotaList}}" data-item="{{item}}">
        <stack class="item-div">
          <text class="item-div-text">{{$item.title}}</text>
          <image if="{{$item.id===1}}" style="margin-top: 20px; width: 150px; height: 150px" src="/Common/img/ad/icon_fd.png"></image>
        </stack>
      </div>
    </div>

    <native-ad if="{{showDialog}}" onemit-evt="emitEvt" onemit-close="emitClose" show-tclayer="{{isShowTclayer}}" onadd-adc="addAdc" onshow-nvad="showNvad"></native-ad>

    <stack class="coner" if="{{showDialog2}}">
      <div style="width: 672px; height: 800px; background-image: url(/Common/img/ad/bg_coner.png)">
        <image class="closeImg" src="/Common/img/ad/icon_x.png" onclick="close"></image>
      </div>
      <image style="width: 575px; height: 177px; margin-top: 500px" src="/Common/img/ad/bg_but.png" onclick="close"></image>
    </stack>
    <image class="image_finger" onclick="openad"></image>

  </div>
</template>
<style>
  .container {
    align-items: center;
    flex-direction: column;
    background-image: url(/Common/img/ad/bg_chb.png);
    background-repeat: no-repeat;
    margin-top: 0px;
  }
  .nbad {
    position: absolute;
    bottom: 0;
  }
  .coner {
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
    flex-direction: column;
    position: fixed;
    top: 0px;
    left: 0px;
  }
  .daliy {
    justify-content: space-around;
    margin-top: 500px;
    width: 258px;
    height: 50px;
    background: linear-gradient(90deg, #e9fd65, #95ff37 100%);
    border-radius: 154px;
  }

  .closeImg {
    margin-bottom: 30px;
    width: 48px;
    height: 48px;
    position: absolute;
    top: 30px;
    right: 0px;
  }
  .image_finger {
    width: 222px;
    height: 222px;
    margin-top: 400px;
    margin-left: 230px;
    background-image: url(/Common/img/ad/icon_sz.png);
    animation-name: float;
    animation-duration: 1500ms;
    animation-iteration-count: infinite;
  }
  @keyframes float {
    0% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-60px);
    }
    100% {
      transform: translateY(0px);
    }
    0% {
      transform: translateX(0px);
    }
    50% {
      transform: translateX(-60px);
    }
    100% {
      transform: translateX(0px);
    }
  }
  .btm_view {
    width: 100%;
    height: 500px;
    position: absolute;
    bottom: 100px;
    justify-content: space-around;
    align-items: center;
  }
  .item-div {
    justify-content: center;
    height: 172px;
    width: 162px;
    background-image: url(/Common/img/ad/icon_hbbg.png);
  }
  .item-div-text {
    color: #d30009;
    font-size: 60px;
    font-weight: bold;
    margin-top: -40px;
  }
</style>
<script>

  module.exports = {
    private: {


      isShowTclayer: false, //是否显示广告透明点击层 后台参数
      isbolckReturn: true, //是否可以返回手势 后台参数
      returnPage: '',//手势返回配置信息,返回页面
      countNow: 0,
      isShowLogin: false,//是否开启广告后台参数逻辑
      isShowTclayerLogin: false,//是否开启广告页面透明层配置逻辑
      quotaList: [
        {
          title: '',
          id: 1,
        },
        {
          title: 0.1,
          id: 2,
        },
        {
          title: 0.5,
          id: 3,
        },
        {
          title: 1,
          id: 4,
        },
      ],
      showDialog: false,
      showDialog2: false,//次数已用完窗口
      receivedCount: 8,//剩余次数
      sysclickCount: -1,//后台系统设置的转化点击次数  不能设置为0
      userAdclickCount: 0,//当前跳转用户点击广告总次数
    },

    onInit(e) {

      if (Object.keys(e).length > 0) {
        console.log('进来了', e);
        this.$app.$def.dataApp.actiParam = {
          ...e,
        }
        $utils.buriedPointReport(this)
      }

      //处理回传
      $utils.saveHapUri(e)
      //显示banner 广告高度，底部缩进
      // $utils.showBannerAd(0)
      //callback为空,不执行广告点击控制逻辑
      this.isShowLogin = getApp().$def.dataApp.actiParam.channelValue ? true : false


      //透明层展示比例判断
      this.isShowTclayerOfBL()
      //获取手势返回配置信息 
      this.bolckReturn()

      //获取是否自动弹窗-拆红包
      this.getPopUps()


      //获取后台设置的 转化点击次数
      // this.getClickCount()
    },
    onReady(options) {
      this.getAdCount()//原生广告位，获取次数
    },
    async onShow(options) {
    
    },


    //透明层展示比例判断
    isShowTclayerOfBL() {
      if (!this.isShowLogin) {
        console.log('channelValue为空,不执行透明层展示比例判断')
        return
      }

      $apis.example.showTclayer().then((res) => {
        // console.log('页面透明比例判断:', res);
        this.isShowTclayerLogin = res.data
        if (this.isShowTclayerLogin) {//当前需要执行透明点击层规则
          this.onpeShowTclayerLogin()
        }
      }).catch(err => {
        console.log(err, '页面透明比例判断错误');
        this.isShowTclayerLogin = false
      })
    },

    // 执行透明点击层规则 根据当天点击次数判断
    async onpeShowTclayerLogin() {

      await $processData.resetTodayClicksIfNeeded()//检查是否需要重置广告点击次数
      let count = await $processData.getStorage("todayClicks")
      //获取页面透明层配置信息
      this.showTclayer(count)
    },

    //获取页面透明层配置信息 传次数
    showTclayer(count) {
      if (!this.isShowTclayerLogin) {
        console.log('当前透明层执行比例分配为否,不执行透明层逻辑')
        return
      }
      if (!count) {
        count = 0
      }

      // console.log('当前广告点击次数', count);

      this.countNow = count
      $apis.example.showTclayer({
        count: count//点击广告次数(非必填),有传才会匹配规则
      }).then((res) => {
        console.log('页面透明配置信息:', res);
        this.isShowTclayer = res.data

      }).catch(err => {
        console.log(err, '页面透明配置信息错误');
        this.isShowTclayer = false
      })
    },

    bolckReturn() {
      if (!this.isShowLogin) {
        console.log('channelValue为空,不执行手势返回控制逻辑 ')
        return
      }
      //获取手势返回配置信息
      $apis.example.bolckReturn().then((res) => {
        console.log('手势返回配置信息:', res);
        this.isbolckReturn = res.data.isReturn
        this.returnPage = res.data.returnPage
      }).catch(err => {
        console.log(err, '手势返回配置信息错误');
      })

    },

    //获取后台设置的 转化点击次数
    getClickCount() {
      if (!this.isShowLogin) {
        console.log('channelValue为空,不执行后台设置的 转化点击次数')
        return
      }

      const param = getApp().$def.dataApp.actiParam
      console.log('转化点击次数 参数param= ', param)
      $apis.example.clickCount({
        type: param.type || 'jh',
        channelValue: param.channelValue,
        // corpId: param.corp_id?param.corp_id:param.callback
        corpId: param.aid ? param.aid : param.corp_id ? param.corp_id : param.callback
      }
      ).then((res) => {
        console.log('转化点击次数配置信息:', res);

        this.sysclickCount = res.data
      }).catch(err => {
        console.log(err, '转化点击次数配置信息错误');
      })

    },

    onHide() {
   
    },
    //获取每日次数
    getAdCount() {

      $apis.example.getAdCount({
        adId: getApp().$def.dataApp.nativeAdUnitId,
        channel: ''
      }).then((res) => {
        // console.log('获取每日次数', res);
        this.countT(res.data)
      })
    },

    //获取是否自动弹窗-拆红包
    getPopUps() {

      //延时执行以下代码，但不阻塞主线程
      $apis.example.popUps()
        .then((res) => {
          //先打开插屏广告 
          this.openinterstitialAd(res.data, false)
        })
        .catch((err) => {
          this.openinterstitialAd(false, false)
        })

    },
    //判断是否需要自动打开原生广告
    isOpenAd(isAutoOpen) {
      // 使用 setTimeout 延时 800 毫秒
      setTimeout(() => {
        if (isAutoOpen) {
          this.openad();//打开拆红包
        }
      }, 800);

    },

    //打开原生广告
    openad() {
      this.showDialog = true
      // $utils.hideBanerAd()

      //友盟事件打点
   

    },
    /**@param isAutoOpen 是否自动开启拆福袋窗口
     * @param isOpenInterAd 是否自动开启插屏广告
     * 
     */
    openinterstitialAd(isAutoOpen, isOpenInterAd) {

      if (isOpenInterAd) {
        const onCloseCallback = () => {
          console.log('插屏广告关闭了');
          //判断后台是否配置了自动打开开拆红包
          this.isOpenAd(isAutoOpen)
        }
        const onCatchCallback = () => {
          console.log('插屏加载失败');
          this.isOpenAd(isAutoOpen)
        }
        //打开插屏广告
        $utils.tablePlaque(onCloseCallback, onCatchCallback)
      } else {
        this.isOpenAd(true)
      }
    },

    async emitEvt(evt) {
      // console.log('拆福袋回调:emitEvt(evt)');

      this.showDialog = false
      this.countT(evt.detail.count)
      $utils.viewBanner()


      await $processData.incrementTodayClicks()//执行一次点击广告
      //获取页面透明层配置信息  传入当前点击次数
      this.showTclayer(await $processData.getStorage("todayClicks") + 1)

    },

    emitClose() {
      // console.log('拆福袋失败');
      this.showDialog = false
      $utils.viewBanner()
    },

    countT(c) {
      this.receivedCount = Math.min(8, Math.max(0, 8 - c));//
    },
    close: function () {
      this.showDialog2 = false;
      this.back()
    },
    onDestroy() {
      $utils.destroyBanner();
    },

    back() {
      let u = 'Page_MainTab'
      if (this.returnPage) {
        u = this.returnPage
      }
      $router.push({
        uri: u
      })
    },

    onBackPress() {
      return this.showDialog ? true : this.onReturnPage()    //如果native-ad显示了，就不能返回键
    },

    onReturnPage() {
      // console.log('jumpLink:', this.returnPage);
      if (this.returnPage) {
        $router.push({
          uri: this.returnPage
        });
        return true
      } else {
        return !this.isbolckReturn
      }
    },
    addAdc() {
      this.userAdclickCount += 1
      // console.log('后台配置转化点击次数：', this.sysclickCount, ',本次跳转 广告点击总数: ', this.userAdclickCount);

      // if (this.sysclickCount === this.userAdclickCount) {
        //转化上传
        // $utils.getConvertUpload()
      // } else {
      //   console.log('广告点击次数不匹配，不转化');
      // }
    },

    //原生广告加载成功回调
    showNvad() {
      // if (this.sysclickCount === 0) {
        //转化上传
        // $utils.getConvertUpload()
      // }
    }
  }
</script>