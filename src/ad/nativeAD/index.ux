<template>
  <div class="item-container">
    <image
      style="width: 528px; height: 708px"
      src="/Common/img/ad/icon_gx.png"
    ></image>
    <image
      style="width: 340px; height: 94px"
      src="/Common/img/ad/bt_cpd.png"
      onclick="completeAdRSA"
    ></image>
    <!-- <div if="native.isShow" class="container">
      <image class="closeImg" src="/Common/img/ad/icon_x.png" onclick="closeAd"></image>
      <video id="video" if="native.isShowVideo" src="{{native.adVideoSrc}}" autoplay="true" onclick="reportNativeClick()" class="ad-video"></video>
      <stack class="stackstyle" onclick="reportNativeClick()">
        <image if="native.isShowImg" class="img" src="{{native.adImgSrc}}"></image>
        <ad-button class="adbtn" onclick="startButton()" valuetype="0" adunitid="{{native.adUnitId}}" adid="{{native.adData.adId}}"></ad-button>
        <text class="adsource">{{ native.adData.source }} 广告</text>
        <text class="adtitle">{{ native.adData.title }}</text>
      </stack>
    </div> -->

    <div
      if="{{showTclayer}}"
      class="tc-layer"
      onclick="reportNativeClick()"
    ></div>
  </div>
</template>

<script>
let nativeAd;
module.exports = {

  props: {

    showTclayer: {
      type: Boolean,
      default: false,
      required: true,
    },
  },
  data: {
    componentName: "ad",
    provider: "",
    native: {
      adUnitId: "",
      isShow: false,
      adData: {},
      isShowImg: true,
      isShowVideo: true,
      isShowData: true,
      errStr: "",
      btnTxt: "",
      adImgSrc: "",
      adVideoSrc: ""
    }

  },
  onInit() {

    this.native.adUnitId = this.$app.$def.dataApp.nativeAdUnitId

    // this.native.adUnitId = 'v5h5xsklp2'
  },
  async onReady(options) {
    console.info("native ad onReady");
    this.showNativeAd2();
    // const storageFlag = await $processData.getStorage("_PRIVAC");
    // if (storageFlag) {
    //   this.showNativeAd();
    // } else {   //未授权，弹出授权询问
    //   console.log('用户授权= ', storageFlag);
    //   console.log('未授权,不加载原生广告');
    // }

  },
  onShow(options) {
    if (this.native.isShow) {
      this.reportNativeShow();
    }
  },
  getAdProvider: function () {
    this.provider = $ad.getProvider();

  },
  isDownloadAd(creativeType) {
    let downloadTypes = [103, 106, 107, 108, 101, 102, 110];
    return downloadTypes.includes(creativeType);
  },
  showNativeAd() {

    nativeAd = $ad.preloadAd({ adUnitId: this.native.adUnitId });
    nativeAd.onLoad(data => {
      // console.info("ad data loaded: " + JSON.stringify(data));
      this.native.adData = data.adList[0];
      if (this.native.adData) {
        if (this.native.adData.imgUrlList) {
          this.native.adImgSrc = this.native.adData.imgUrlList[0];
          console.info(" this.native.adImgSrc =" + this.native.adImgSrc);
          this.native.isShowImg = true;
        } else {
          this.native.isShowImg = false;
          this.native.adImgSrc = "";
        }
        if (this.native.adData.clickBtnTxt) {
          this.native.btnTxt = this.native.adData.clickBtnTxt;
        } else {
          this.native.btnTxt = "";
        }
        if (this.native.adData.videoUrlList && this.native.adData.videoUrlList[0]) {
          this.native.adVideoSrc = this.native.adData.videoUrlList[0];
          this.native.isShowVideo = true;
        } else {
          this.native.isShowVideo = false;
          this.native.adVideoSrc = "";
        }
        this.native.isShow = true;
        this.native.errStr = "";
        this.reportNativeShow();
      }
    });
    nativeAd.onError(e => {
      console.error("load ad error:" + JSON.stringify(e));
      this.native.isShowImg = false;
      this.native.isShowVideo = false;
      this.native.isShow = false;
      this.native.errStr = JSON.stringify(e);
    });
    nativeAd.load();
  },
  showNativeAd2() {
    let canIUseAdCount = false
    try {
      canIUseAdCount = $ad.canIUse({ type: "feedMultiAd" })
    } catch (e) {
    }
    let adParams = {
      adUnitId: this.native.adUnitId, // 原生自渲染2.0广告广告位id
      type: 'native',          // 原生自渲染2.0广告类型 
    }

    $ad.preloadAd({
      ...adParams,
      success: (data) => {
        this.adList = data.adList  // 一次成功返回有 1-3 个数据，参照对应的 adCount 数（小概率情况下小于 adCount 数）
        console.info(`原生广告数据返回success! data=${JSON.stringify(data)}`);
      }, fail: (data, code) => {
        console.log(data, code)
        if (code === 205) {
          this.adList = data.adList // 错误码205时，表示缓存已满导致加载失败，此时从缓存返回最多3个广告数据
        } else {
          $prompt.showToast({
            message: `fail! data=${JSON.stringify(data)}, code=${code}`
          })
        }
      }
    })

  },
  reportNativeShow() {
    if (nativeAd) {
      nativeAd.reportAdShow({ adId: this.native.adData.adId });
    }
  },
  reportNativeClick() {
    console.info(" 原生广告被点击了");
    nativeAd.reportAdClick({
      adId: this.native.adData.adId
    });

    //转化上传
    $utils.getConvertUpload()

    //广告或透明层被点击后隐藏透明层
    this.showTclayer = false

  },
  listenNativeAdDownloadStatus(downloadstatus) {
    if (downloadstatus === "INSTALLED") {
      this.native.btnTxt = "OPEN";
    }
  },
  startButton(event) {
    console.error('start download result is = ', event.resultCode)
  },
  removeAdListen: function () {
    if (nativeAd) {
      nativeAd.offDownloadProgress();
      nativeAd.offError(() => {
        console.log("nativeAd offError");
      });
      nativeAd.offLoad(() => {
        console.log("nativeAd offLoad");
      });
      nativeAd.offStatusChanged();
    }
  },
  onDestroy() {
    // if (nativeAd) {
    //   nativeAd.destroy();
    // }
  },
  closeAd: function () {
    this.native.isShow = false;
  },

  completeAdRSA() {
    console.log('点击拆福袋');

    //先判断广告没有没加载出来，没有就直接返回不执行接口

    if (!this.native.isShow) {
      console.log('广告展示不成功,拆红包不成功');
      $prompt.showToast({
        message: '拆红包失败！请重试',
        gravity: 'center'
      });

      this.$emit('emitClose')
      return
    }


    var adType = 'NATIVE'
    var adId = this.native.adUnitId
    var channel = getApp().$def.dataApp.channel
    var countMax = getApp().$def.dataApp.countMax
    var brand = getApp().$def.dataApp.brand
    // 构建参数对象
    const params = {
      adType,
      adId,
      channel,
      countMax,
      brand
    };

    $apis.example.completeAdRSA(params).then((res) => {

      console.log(`完成广告----------> jumpLink:${res.data.jumpLink}, 完成次数：${res.data.count} 当次奖励：${res.data.awardAmount}`);

      //先判断有没有返回跳转链接，有就跳
      if (res.data.jumpLink) {
        $router.push({
          uri: res.data.jumpLink
        });

      } else {
        var mes = ''
        if (res.data.awardAmount) {
          mes = '恭喜获得0.01元红包'
        } else {
          if (res.data.count > 8) {
            mes = '今天活动次数已用完'
          } else {
            mes = '再来一次'
          }
        }
        $prompt.showToast({
          message: mes,
          gravity: 'center'
        })
      }

      this.$emit('emitEvt', {
        count: res.data.count
      })
    }).catch(err => {
      console.log(err, '点击拆福袋错误');
      $prompt.showToast({
        message: JSON.parse(err).message,
        gravity: 'center'
      });
    });
  }

}
</script>
<style>
.tc-layer {
  width: 100%;
  height: 850px;
  position: absolute;
  bottom: 100px;
}

.item-container {
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  justify-content: center;
  align-items: center;
  flex-direction: column;
  position: fixed;
  top: 0;
  left: 0;
}
.container {
  flex-direction: column;
  align-items: flex-end;
}
.stackstyle {
  width: 540px;
  height: 306px;
  align-items: flex-end;
}
.img {
  width: 100%;
  height: 100%;
  border-radius: 20px;
}
.closeImg {
  margin-bottom: 30px;
  width: 48px;
  height: 48px;
}
.alert {
  font-size: 40px;
  margin-top: 20px;
  margin-bottom: 20px;
}

.ad-video {
  width: 100%;
  height: 415px;
}
.btn {
  height: 80px;
  width: 60%;
  background-color: #00bfff;
  color: #ffffff;
  border-radius: 20px;
  margin-bottom: 20px;
}
.btn:active {
  background-color: #058fbd;
}
.adbtn {
  width: 200px;
  height: 50px;
  color: #ffffff;
  background-color: #00bfff;
  border-radius: 8px;
  position: absolute;
  align-self: flex-end;
  bottom: 20px;
  right: 20px;
}
.adbtn:active {
  background-color: #058fbd;
}
.adsource {
  background-color: rgba(0, 0, 0, 0.5);
  padding: 5px;
  color: #ffffff;
  position: absolute;
  top: 0;
  font-size: 18px;
  border-top-left-radius: 20px;
  padding-left: 10px;
  padding-right: 10px;
}
.adtitle {
  background-color: rgba(0, 0, 0, 0.5);
  padding: 5px;
  color: #ffffff;
  font-size: 18px;
  padding-left: 10px;
  padding-right: 10px;
  border-bottom-left-radius: 20px;
}
</style>