<import name="icon" src="apex-ui/components/icon/index"></import>
<import name="bottom-native" src="../components/bottomNative.ux"></import>
<template>
  <div
    class="threaten"
    style="{{`background-image: url(${bgimgList[pollingPageNum]})`}}"
  >
    <text class="textt" 
      >九、减脂过程中的注意事项
      减脂是一个需要耐心和坚持的过程，要注意避免一些常见的误区。首先，减脂不可太快，因为减脂太快会造成体内大量脂肪分解，产生过多的酮体沉积在体内，引起酮症酸中毒。同时，减脂太快也会更累、更饿，导致难以坚持减脂计划。其次，不可过度节食，过度节食会导致基础能量供应不足，出现明显的饥饿感和低血糖，不利于身体健康。减脂应循序渐进，均衡饮食避免微量营养素缺乏，以及合理运动。在饮食上，要控制热量摄入，增加蔬菜、水果、全谷物等富含膳食纤维的食物摄入，减少高热量、高脂肪、高糖分的食物摄入。在运动上，要选择适合自己的运动项目，逐渐增加运动强度和时间，保持适当的运动节奏。
    </text>
    <div
      @click="adCapture"
      class="ad-container"
      if="{{ hasAdList && adState && currentTask.linkType == 'YS' }}"
    >
      <ad
        adId="{{adList.adId}}"
        class="box"
        show="{{!!adList.adId}}"
        onerror="adError"
        onadclick="adClick"
        onadclose="close"
        type="native"
        closeBtnPosition="left-top"
        onadshow="adSuccShow"
      >
        <ad-clickable-area type="click" class="container">
          <div
            class="ad-text {{showBgIndex === 0 || showBgIndex === 1?'position-center':showBgIndex === 2?'position-bottom': 'position-top' }}"
          >
            <ad-clickable-area type="click">
              <image
                class="ad-image"
                src="{{adList.imgUrlList? adList.imgUrlList[0]: adList.icon}}"
                if="{{adList.creativeType !==13}}"
              ></image>
            </ad-clickable-area>
            <ad-clickable-area
              type="video"
              class="ad-image"
              if="{{adList.creativeType===13}}"
            >
            </ad-clickable-area>
          </div>
        </ad-clickable-area>
      </ad>

      <div
        class="bottom-ad"
        if="{{currentTask.bottomAdId && hasAdList  && adState && currentTask.linkType == 'YS' && !isAudit }}"
      >
        <bottom-native
          ad-id="{{currentTask.bottomAdId}}"
          onemit-close="bottomAdClick"
        ></bottom-native>
      </div>
    </div>

    <div class="tap" onclick="clickPopover" else></div>
    <div class="complaint" if="{{complaintStatus}}">
      <div class="imageBox">
        <image src="{{complaintImg}}" onclick="complaint"></image>
      </div>
    </div>
  </div>
</template>

<script>
const { adCodeData, appId } = require('../../config.js').default

export default {
  private: {
    title: '欢迎体验快应用开发',
    branch: '',
    adObj: '',
    defaultAd: {
      desc: '广告流量联盟，为用户提供最优质的商业化解决方案。',
      title: '广告流量联盟',
      icon: '广告',
      clickBtnTxt: '点击安装',
      img: 'https://cdn.ihaituo.cn/pro/sy/admin/advertising/3639bdbde8e84397a297ad54f89ac4c3.jpg',
    },
    adId: '',
    adList: '',
    hasAdList: false,
    showBgIndex: 0, // 默认显示第一张图片，
    maxNum: 5, //最多显示到第5张
    showRedPack: false, // 控制红包显示
    visitCount: 0, // 访问计数器
    isfristReqCoun: true,
    isAudit: false,
    adState: true,
    taskData: {}, //获取任务数据
    maxTaskNum: 0, //最大任务数
    currentTaskNum: 0, //当前任务数
    taskState: '', //当前任务状态
    rewardedVideoAd: null, //激励广告
    rewardedVideoAdState: true, //激励广告状态
    currentTask: {
      isLinkQa: false,
      linkType: '',
      adIdOrPackage: '',
    }, // 新增属性，用于跟踪当前任务状态
    bgimgList: [
      'http://cdn.ihaituo.cn/qa/pro/app/43150de1270ff5c9771dbb9593ee7ac3.png',
      'http://cdn.ihaituo.cn/qa/pro/app/04ff0ae1a7bbadfd461de4e5a5a15f2f.png',
      'http://cdn.ihaituo.cn/qa/pro/app/1f0bffde7d5c9014573ceb1bfc29f65a.png',
      'http://cdn.ihaituo.cn/qa/pro/app/908f0d5c60ede2359228593c26e8a2f7.png',
    ],
    adUnitId: '',
    isFinishTask: false, //是否完成任务
    rewardedVideoAdTime: null, //激励广告延时
    rewardedVideoAdPlayCount: 0, //激励视频已播放次数
    changeImageTime: null, //当前换图时间
    complaintStatus: false, //举报状态
    complaintImg:
      'http://cdn.ihaituo.cn/qa/pro/temporary/63d3e397c404d4d7049ad6167fe6dbc7.png', //举报图片
    pollingPageNum: 8, //轮询广告页面的当前轮询索引
  },
  onInit: function (e) {
    // 初始化全局参数
    if (Object.keys(e).length > 0) {
      this.$app.$def.dataApp.actiParam = {
        ...e,
      }
    }
    // $adFun.ipLimit(this)
    // 延迟执行埋点报告
    setTimeout(() => {
      $utils.buriedPointReport(this)
    }, 1000)

    // 重置访问计数器
    this.visitCount = 0

    // 获取广告提供商
    const branch = $ad.getProvider().toLowerCase()
    this.branch = branch
    this.adObj = adCodeData[branch]
    this.getAdConversionImg()
    // 获取广告数据
    this.getPageAdData()
  },
  onBackPress() {
    return true
  },
  onHide() {
    this.clearRewardedVideoAdTime()
    this.$app.openApp()
    console.log('这是页面的onhide')
  },
  /**
   * 事件捕获
   */
  adCapture(evt) {
    // 阻止事件冒泡
    evt.stopPropagation()
  },
  onShow() {
    $utils.changeShowAd(false)
    let actiParam = this.$app.$def.dataApp.actiParam
    this.$app.$sensors.pageShow({
      channel: actiParam.channelValue,
      formId: this.adId,
      ...actiParam,
    })

    if (
      this.isFinishTask &&
      this.branch === 'xiaomi' &&
      this.currentTask.linkType === 'YS'
    ) {
      this.isFinishTask = false
      this.settingUpTasks()
    }

    if (this.visitCount > 0) {
      console.log('这里展示红包1')
      //计数大于1或自动开启开红包展示
      this.showRedPack = true
      this.changeImage('onhide')
    }

    if (this.rewardedVideoAd) {
      this.openRewardedVideoAd()
    }
  },
  /***
   * 点击弹窗
   */
  clickPopover(evt) {
    // 每次显示页面时，增加一次计数
    this.visitCount++
    // 阻止事件冒泡
    if (evt) {
      evt.stopPropagation()
    }
    this.startTask()
  },
  /**
  启动任务
  */
  startTask() {
    // 根据当前任务类型执行相应操作
    switch (this.currentTask.linkType) {
      case 'JL':
        if (this.rewardedVideoAdState) {
          this.showVideoAd()
        }
        break
      case 'KYY':
        this.jumpoOutside(this.currentTask.adIdOrPackage)
        break
      default:
        console.log('Unknown task type:', this.currentTask.linkType)
    }
    // 兜底
    if (
      (this.currentTask.linkType === 'YS' && !this.adState) ||
      (this.currentTask.linkType === 'JL' && !this.rewardedVideoAdState) ||
      this.currentTask.linkType === '无任务'
    ) {
      this.pollinPage()
      return
    }
    if (this.currentTask.linkType === 'KYY') {
      //计数大于1或自动开启开红包展示
      setTimeout(() => {
        console.log('更新礼包显示', this.currentTask.linkType)
        // 更新礼包显示
        this.changeImage('kyy')
      }, 800)
    }
    // 设置下一个任务
    this.settingUpTasks()
  },
  changeImage(type) {
    //1秒内不会重复调用
    if (this.changeImageTime && Date.now() - this.changeImageTime < 1000) {
      return
    }
    this.changeImageTime = Date.now()
    console.log(type, '查看类型')
    this.showBgIndex = this.pollingPageNum
  },
  /***
   * 预加载原生广告
   */
  preloadAd(id) {
    try {
      console.log(id, '查看广告id编码')
      const that = this
      let adId = id
      this.adId = id

      require('@service.ad').preloadAd({
        type: 'native', // 原生信息流广告
        adCount: 1,
        adUnitId: adId, // 原生信息流广告广告位id,
        ecpm: true,
        adid: adId, // 原生信息流广告广告位id,
        success: (data) => {
          this.adList = data.adList[0]
          console.log(this.adList, '查看原生广告数据')
          this.hasAdList = true
          this.adState = true
          if (this.debug) {
            prompt.showToast({
              message: `ad load success`,
            })
          }
        },
        fail: (data, code) => {
          console.log(data, code, '返回广告失败1')
          this.sensorsTrack(
            {
              errData: data,
            },
            'error'
          )
          this.hasAdList = true
          this.adState = false
          if (code === 205) {
            this.hasAdList = true
            this.adList = data.adList[0]
          } else {
            this.adState = false
            this.pollinPage()
            if (this.debug) {
              prompt.showToast({
                message: `ad load fail!data= ${JSON.stringify(
                  data
                )},code= ${code}`,
              })
            }
          }
        },
      })
    } catch (e) {
      console.log(e, '是这里报错吗')
    }
  },
  adClick() {
    let ecpmParam = {
      //竞价相关参数
      ecpm: this.adList.ecpm,
      adType: 'NATIVE',
      adPositionId: this.adId,
      clickCount: '1',
      isclick: true,
    }
    // 每次显示页面时，增加一次计数
    this.visitCount++
    console.log('竞价相关参数', ecpmParam)
    $utils.conversionUpload(this, ecpmParam)
    $utils.buriedPointReport(this, { event: 'click', adId: this.adId })
    this.hasAdList = false
    if (this.branch === 'xiaomi' && this.currentTask.linkType === 'YS') {
      this.isFinishTask = true
    }

    this.sensorsTrack(
      {
        formId: this.adId,
      },
      'click'
    )
    // 点击广告后，执行下一个任务
    this.$app.openApp({ type: 'ad', formId: this.adId })
    this.startTask()
    console.log('这是点击广告后执行的openApp')
    this.pollinPage()
  },
  //轮询下个页面
  pollinPage() {
    console.log('执行轮询页面')
    $router.push({
      uri: 'activity/pollingPage09',
      params: {
        ___PARAM_LAUNCH_FLAG___: 'clearTask'
      }
    })
  },
  adSuccShow(e) {
    if (this.branch === 'oppo') {
      let ecpm = this.adList.ecpm
      this.ecpm = ecpm
      console.log('查看ecpm', ecpm)
      $utils.conversionUpload(this, {
        adType: 'NATIVE',
        adPositionId: this.adId,
        isclick: false,
        ecpm: this.adList.ecpm,
      })
    }
    console.log(e, '广告成功展示')
    this.sensorsTrack(e, 'show')
  },
  adError(errCode, errMsg) {
    this.adState = false
    this.sensorsTrack(
      {
        errData: {
          errCode: errCode.errCode,
          errMsg: errCode.errMsg,
        },
      },
      'error'
    )
  },
  close(e) {
    console.log(e, '广告关闭')
  },
  // 埋点上报  曝光埋点事件 $WebShow
  sensorsTrack(e = {}, type = 'show') {
    const { formId = '', subTitle = '' } = e
    let apid = formId || this.adId
    $adFun.newBurialSite(this, {
      eventName: type, // 事件名
      formId: apid, // 广告id
      subTitle: subTitle, //页面名
      ...this.$app.$def.dataApp.actiParam,
    })
  },
  /***
   * 是否自动打开
   */
  getClickReviewControl() {
    const branch = $ad.getProvider().toUpperCase()
    $apis.task.getClickReviewControl({ branch: branch }).then((res) => {
      if (!res.data) {
        this.showRedPack = true
      }
      this.isAudit = res.data
    })
  },
  complaint(evt) {
    // 阻止事件冒泡
    if (evt) {
      evt.stopPropagation()
    }
    console.log('跳转举报')
    $router.push({
      uri: 'feedback',
    })
  },
  createRewardedVideoAd: function (adUnitId) {
    try {
      if (!adUnitId || this.rewardedVideoAd) {
        if (!adUnitId) {
          this.rewardedVideoAdState = false
        }
        return
      }
      const that = this
      this.adUnitId = adUnitId
      let rewardedVideoAd = $ad.createRewardedVideoAd({
        adUnitId: adUnitId,
      })
      this.rewardedVideoAd = rewardedVideoAd
      if (!rewardedVideoAd) {
        // 不支持广告
        this.rewardedVideoAd = null
        this.rewardedVideoAdState = false
        return
      }
      rewardedVideoAd.onLoad((e) => {
        that.rewardedVideoAdState = true
        console.log('激励视频广告加载成功', e)
        if (that.brand === 'oppo') {
          const data = that.rewardedVideoAd.getECPM()
          console.log(`getECPM: 激励视频获取实时竞价结果成功!ecpm=${data.ecpm}`)
          that.emcp = data.ecpm
          $utils.conversionUpload(that, {
            adType: 'REWARDED_VIDEO',
            adPositionId: adUnitId,
            isclick: false,
            ecpm: data.ecpm,
          })
        }
      })
      rewardedVideoAd.onClose((e) => {
        console.log(e, '监听用户点击关闭广告 按钮的事件')
        if (that.branch !== 'vivo') {
          that.rewardedVideoAd.load()
        }
        if (e.isEnded) {
          $utils.conversionUpload(that, {
            adType: 'REWARDED_VIDEO',
            adPositionId: adUnitId,
            isclick: true,
            ecpm: that.ecpm,
          })
          that.sensorsTrack({ formId: adUnitId }, 'click')
          $utils.buriedPointReport(that, { event: 'click', adId: adUnitId })
          $utils.changeShowAd(false)
        }
      })

      rewardedVideoAd.onError((e) => {
        console.log(e, '激励广告错误')
        that.rewardedVideoAd = ''
        that.rewardedVideoAdState = false
        that.sensorsTrack({ formId: adUnitId }, 'error')
        $utils.changeShowAd(false)
      })

      if (this.branch !== 'vivo') {
        rewardedVideoAd.load()
      }
    } catch (error) {
      console.log(error)
    }
  },
  /**
   * 展示激励广告
   */
  showVideoAd() {
    if (this.branch !== 'vivo') {
      try {
        console.log('进来了展示激励')
        this.rewardedVideoAd.show()
        $utils.changeShowAd(true)
        this.sensorsTrack({ formId: this.adUnitId }, 'show')
      } catch (e) {
        console.log(e, '怎么激励失败')
        this.jumpoOutside()
        this.$app.$def.dataApp.isShowAd = false
      }
    } else {
      this.rewardedVideoAd
        .load()
        .then(() => {
          this.rewardedVideoAd.show()
          $utils.changeShowAd(true)
          this.sensorsTrack({ formId: this.adUnitId }, 'show')
        })
        .catch((e) => {
          console.log(e, '怎么激励失败')
          this.jumpoOutside()
          this.$app.$def.dataApp.isShowAd = false
        })
    }
  },
  /**
   * 设置任务
   */
  settingUpTasks() {
    const { taskList } = this.taskData
    // this.currentTask = taskList[this.currentTaskNum]
    this.currentTask = taskList[this.pollingPageNum]
    console.log(this.currentTask, '查看当前任务')
    if (!this.currentTask) {
      this.currentTask = {
        linkType: '无任务',
        adIdOrPackage: '',
      }
      console.log('No more tasks available')
      this.pollinPage()
      return
    }
    console.log('Current task:', this.currentTask)
    if (
      this.isFinishTask &&
      this.branch === 'xiaomi' &&
      this.currentTask.linkType === 'YS'
    ) {
      //如果有则先弹出   表明是小米任务已经外跳
      return
    }
    // 根据任务类型执行相应操作
    switch (this.currentTask.linkType) {
      case 'JL':
        this.createRewardedVideoAd(this.currentTask.adIdOrPackage)
        break
      case 'YS':
        this.preloadAd(this.currentTask.adIdOrPackage)
        break
      default:
        console.log('Unknown task type:', this.currentTask.linkType)
    }
    // 更新任务计数器
    this.currentTaskNum = (this.currentTaskNum + 1) % (this.maxTaskNum + 1)
    console.log(this.currentTaskNum, '查看当前任务数')
  },
  /**
   * 获取页面广告参数
   */
  async getPageAdData() {
    // console.log(appId, '查看appId')
    // console.log(this.branch, '查看branch')
    $apis.activity
      .getAdConfigView({
        appId: appId,
        type: this.branch,
        path: 'pollingPage',
      })
      .then((res) => {
        // console.log(res, '查看自定义广告配置')
        const { adConversionModel, adConversionModelList } = res.data
        this.taskData = {
          taskList: adConversionModelList,
          backEndLink: adConversionModel,
          ...res.data,
        }
        console.log(this.taskData, '查看当前任务数据')
        if (adConversionModelList.length < 1) {
          return
        }
        this.maxTaskNum = this.taskData.taskList.length - 1
        this.settingUpTasks()
        this.openRewardedVideoAd()
      })
      .catch((err) => {
        this.taskData = {
          taskList: [],
          backEndLink: 'hap://app/com.haituo.bookkeeping/pages/displayDesktop',
        }
        this.settingUpTasks()
      })
  },

  getAdConversionImg() {
    $apis.activity
      .getAdConversionImg({ path: 'pollingPage', type: this.branch })
      .then((res) => {
        // console.log(res, '查看广告图片数据')
        if (res.data.imgData.length > 0) {
          this.bgimgList = res.data.imgData
        }
        this.complaintStatus = res.data.complaintStatus
        this.complaintImg = res.data.complaintImg || this.complaintImg
      })
      .catch((err) => {
        console.log(err, '获取广告图片失败')
      })
  },
  /**
   * 判断是否能跳转QA链接
   */
  checkAndJumpQaLink() {
    if (!this.taskData.isLinkQa && this.currentTask.linkType === 'YS') {
      return console.log('任务数据中isLinkQa参数不允许跳转')
    }
    if (this.currentTask.qaLink) {
      this.jumpoOutside(this.currentTask.qaLink)
    } else {
      console.log('当前任务中没有QA链接')
    }
  },
  //跳转方法
  jumpoOutside(link = '') {
    console.log(link, '查看跳转链接')
    $utils.jumpoOutside({
      url: link || this.taskData.backEndLink.adIdOrPackage,
      ...this.$app.$def.dataApp.actiParam,
    })
  },
  bottomAdClick() {
    this.hasAdList = false
    this.settingUpTasks()
  },
  //延时开启激励广告
  openRewardedVideoAd() {
    try {
      if (
        !this.taskData.rewardedStatus ||
        this.rewardedVideoAdPlayCount >= this.taskData.rewardedCount ||
        !this.taskData.rewardedId
      ) {
        // 任务开关
        return
      }
      this.clearRewardedVideoAdTime()
      this.createRewardedVideoAd(this.taskData.rewardedId)
      this.rewardedVideoAdTime = setTimeout(() => {
        this.rewardedVideoAd.show()
        $utils.changeShowAd(true)
        this.rewardedVideoAdPlayCount++
        console.log(this.rewardedVideoAdPlayCount, '查看激励广告播放次数')
        this.sensorsTrack({ formId: this.taskData.rewardedId }, 'show')
      }, this.taskData.rewardedSeconds * 1000)
    } catch (error) {
      this.sensorsTrack({ formId: this.taskData.rewardedId }, 'error')
      console.log(error, '激励广告打开失败')
    }
  },
  //清除激励广告
  clearRewardedVideoAdTime() {
    clearTimeout(this.rewardedVideoAdTime)
  },
}
</script>

<style lang="less">
.threaten {
  width: 100%;
  height: 100%;
  background-image: url("http://cdn.ihaituo.cn/qa/pro/app/029e30f6272517f887af64ab30d2f0b7.png");
  background-repeat: no-repeat;
  background-position: center;
  background-size: 100% 100%;
  .tap {
    width: 100%;
    height: 100%;
    position: fixed;
    top: 0;
    left: 0;
  }
}

.complaint {
  width: 55px;
  height: 110px;
  position: fixed;
  bottom: 200px;
  left: 0;
}

.ad-container {
  width: 100%;
  height: 100%;
}

.img-popover {
  width: 630px;
  object-fit: cover;
}
.box {
  width: 100%;
  height: 100%;
  .container {
    width: 100%;
    height: 100%;
    .ad-text {
      width: 100%;
      justify-content: center;
      .ad-image {
        width: 360px;
        height: 160px;
        border-radius: 10px;
        object-fit: cover;
      }
    }

    .position-center {
      position: absolute;
      top: 60%;
    }

    .position-top {
      position: absolute;
      top: 20px;
    }

    .position-bottom {
      position: absolute;
      bottom: 20px;

      .ad-image {
        width: 750px;
        height: 160px;
        object-fit: cover;
      }
    }
  }
}

.simulating-exit {
  width: 180px;
  height: 65px;
  border-radius: 32px;
  border: 1px solid #fcf;
  background-color: #ffd3db;
  margin-top: 20px;
  justify-content: space-between;
  align-items: center;
  padding: 0 12px;
  position: absolute;
  top: 20px;
  right: 30px;
}
.image_finger {
  position: absolute;
  top: 950px;
  left: 400px;
  width: 150px;
  height: 150px;
  /* background-color: #00ffff; */
  background-image: url(/assets/images/icon_sz.png);
  animation-name: float;
  animation-duration: 1500ms;
  animation-iteration-count: infinite;
  background-position: center;
  background-size: 100%;
}
@keyframes float {
  0% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-60px);
  }
  100% {
    transform: translateY(0px);
  }
  0% {
    transform: translateX(0px);
  }
  50% {
    transform: translateX(-60px);
  }
  100% {
    transform: translateX(0px);
  }
}

.coner {
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.8);
  align-items: center;
  flex-direction: column;
  position: fixed;
  justify-content: center;
  top: 0px;
  left: 0px;
}
.conerno {
  width: 0;
  height: 0;
  position: fixed;
}

.bottom-ad {
  position: fixed;
  bottom: 0;
  left: 0;
}
.textt {
  position: fixed;
  bottom: 0;
  height: 100px;
  color: rgba(255, 255, 255, 0);
  left: 0;
}
</style>
