<template>
  <div>
    <!-- 自渲染广告组件 -->
    <div class="adRenderer" onclick="adCapture" if="{{hasAdList}}">
      <ad
        adId="{{adList.adId}}"
        class="box"
        show="{{!!adList.adId}}"
        onerror="adError"
        onadclick="adClick"
        onadclose="close"
        type="native"
        closeBtnPosition="left-top"
        onadshow="adSuccShow"
      >
        <ad-clickable-area class="ad-title" style="width: 100%; height: 100%">
          <text class="page-title" style="font-size: 1px">{{
            adList.title
          }}</text>
        </ad-clickable-area>
        <ad-clickable-area class="ad-image" style="width: 100%; height: 100%">
          <image
            if="{{adList.imgUrlList}}"
            src="{{adList.imgUrlList[0]}}"
            style="height: 1px"
          ></image>
        </ad-clickable-area>
        <ad-clickable-area
          class="ad-image"
          type="video"
          style="width: 1px; height: 1px"
        >
        </ad-clickable-area>
      </ad>
    </div>
  </div>
</template>

<script>
export default {
  data: {
    formId: '',
    adList: {},
    hasAdList: false,
    maxErrorNum: 3, //最大错误请求数  在外部做限制即可
    errorNum: 0, //错误次数
    errorTime: null, //错误时间
  },
  props: {
    adId: {
      default: '',
    },
    autoLoad: {
      default: true,
    },
    closeBtnPosition: {
      default: 'left-top',
    },
    isShowAd: {
      default: false,
    },
    title: {
      default: '全屏',
    },
    selfAutoLoad: {
      default: false,
    },
  },
  onInit() {
    if (this.autoLoad) {
      this.preloadAd(this.adId)
    }
  },
  onReady() {},
  adCapture(evt) {
    if (evt) {
      evt.stopPropagation()
    }
  },
  /***
   * 预加载广告
   */
  preloadAd(id) {
    try {
      if (!id) return
      let adId = id || this.adId || this.formId
      this.formId = adId
      this.errorTime = null
      console.log('自渲染广告组件预加载', adId)

      if (!adId) return console.error('自渲染广告组件预加载失败，adId不存在')

      require('@service.ad').preloadAd({
        type: 'native', // 原生信息流广告
        adCount: 1,
        adUnitId: adId, // 原生信息流广告广告位id,
        ecpm: true,
        adid: adId, // 原生信息流广告广告位id,
        success: (data) => {
          this.adList = data.adList[0] //广告数据
          this.hasAdList = true //数据存在
          console.log(`自渲染广告组件预加载成功-${this.title}`, this.adList)
          this.errorNum = 0 //重置错误次数
          this.sensorsTrack({}, 'load')
        },
        fail: (data, code) => {
          try {
            console.log(`自渲染广告组件预加载失败-${this.title}`, data)
            this.$emit('emitAdError', {
              errorNum: this.errorNum,
            })
          } catch (error) {
            console.log('自渲染广告组件预加载失败-emitAdError', error)
          }
          this.errorNum = this.errorNum + 1
          this.sensorsTrack(
            {
              errData: data,
            },
            'loadError'
          )
          this.hasAdList = false
        },
      })
    } catch (e) {}
  },
  adClick(e) {
    console.log(`自渲染广告组件点击-${this.title}`, e)
    this.reportConversionAndOldTracking(1)
    this.$emit('emitAdClick')
    this.$app.openApp({
      type: 'ad',
      formId: this.adId || this.formId,
    })
  },
  close(e) {
    console.log(`自渲染广告组件关闭-${this.title}`, e)
    this.$emit('emitAdClose')
  },
  adError(errCode = {}) {
    console.log(`自渲染广告组件出错-${this.title}`, errCode)
    this.hasAdList = false
    this.$emit('emitAdError', {
      errorNum: this.errorNum,
    })
    this.errorNum++
    this.sensorsTrack(
      {
        errData: {
          errCode: errCode.errCode,
          errMsg: errCode.errMsg,
        },
      },
      'error'
    )
  },
  adSuccShow(e) {
    console.log(`自渲染广告组件展示-${this.title}`, e)
    this.reportConversionAndOldTracking(0)
    this.$emit('emitAdShow')
  },
  /**
   * 新埋点上报  曝光埋点事件 $WebShow
   * @param {*} e
   * @param {*} type
   */
  sensorsTrack(e = {}, type = 'show') {
    try {
      const { formId = '', subTitle = '', errData = {} } = e
      let apid = formId || this.adId || this.formId
      $adFun.newBurialSite(this, {
        eventName: type, // 事件名
        formId: apid, // 广告id
        subTitle: subTitle, //页面名
        ...this.$app.$def.dataApp.actiParam,
        errData: errData,
      })
    } catch (error) {}
  },
  /**
   * 转化上传上报 + 旧埋点
   * @param {*} isClick  布尔值   或  0   1    0曝光    1点击
   */
  reportConversionAndOldTracking(isClick) {
    try {
      let ecpmParam = {
        //转换上传数据包
        ecpm: this.adList.ecpm,
        adType: 'NATIVE',
        adPositionId: this.adId || this.formId,
        isclick: isClick,
      }
      this.sensorsTrack({}, isClick ? 'click' : 'show')
      $utils.conversionUpload(this, ecpmParam)
      if (isClick) {
        $utils.buriedPointReport(this, {
          event: 'click',
          adId: ecpmParam.adPositionId,
        })
      }
    } catch (error) {
      console.log(error, `自渲染组件出错-${this.title}`)
    }
  },
}
</script>

<style lang="less">
.adRenderer {
  width: 100%;
  height: 100%;

  .box {
    width: 100%;
    height: 100%;
  }
}
</style>
